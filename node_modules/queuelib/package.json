{
  "author": {
    "name": "David Wee",
    "email": "rook2pawn@gmail.com",
    "url": "http://rook2pawn.com"
  },
  "name": "queuelib",
  "description": "Straightforward asynchronous queue processor",
  "version": "0.3.6",
  "homepage": "https://github.com/rook2pawn/node-queuelib",
  "repository": {
    "type": "git",
    "url": "git://github.com/rook2pawn/node-queuelib.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "tape test/test*.js"
  },
  "devDependencies": {
    "request": "^2.34.0",
    "tape": "^2.12.3"
  },
  "dependencies": {
    "hashish": "0.0.4"
  },
  "readme": "[![Build Status](https://travis-ci.org/rook2pawn/node-queuelib.svg?branch=master)](https://travis-ci.org/rook2pawn/node-queuelib)\n\nNew!\n====\nKey value store across series! Just call .done(hash) to store the keys/values of the hash\n\n    queue.series([\n        function(lib) {\n            lib.done({one:1})\n        },\n        function(lib) {\n            lib.done({two:2})\n        },\n        function(lib) {\n            var x = lib.get('one') + lib.get('two'); // x = 3\n            lib.done();\n        }\n    ]);\n\n\nYou can also use .set(hash)\n\n    queue.series([\n        function(lib) {\n            lib.set({one:1});\n            lib.done()\n        },\n        function(lib) {\n            lib.set({life:42})\n            lib.done()\n        },\n        function(lib) {\n            t.equal(43,lib.get('one') + lib.get('life'));\n            lib.done();\n        }\n    ]);\n\n\nNew!\n====\nEarly termination flow control in .series! \n        \n    queue.series([\n    function(lib,id) {\n        // stuff\n        lib.terminate(id);\n    },\n    function(lib) {\n        // will be removed\n    }\n    ]);\n\n.series will generate unique UUID's and enable removal on .terminate(id).\n\n\n\nQueueLib\n========\n\nAsynchronous queue processor\n\n    - lightweight, simple\n    - flow control in series\n\n\nMethods\n=======\n\n.pushAsync(fn)\n--------------\n\n    var Q = require('queuelib');\n    var queue = new Q;\n    \n    queue.pushAsync(function(lib) {\n        // do something asynchronously\n        lib.done();\n    });\n    \n    queue.pushAsync(function(lib) {\n        // do something else asynchronously\n        lib.done();\n    });\n\n.series ([fn1,fn2,..])\n----------------------\n\nqueue.series([\n    function(lib) {\n        // do something asynchronously\n        lib.done();\n    },\n    function(lib) {\n        // do something else asynchronously\n        lib.done();\n    }\n]);\n\n\nExample 1\n---------\n\n\n    var Q = require('queuelib');\n    var request = require('request');\n    var queue = new Q;\n    \n    queue.pushAsync(function(lib) {\n        // do something asynchronously\n        request('http://google.com',function(err,response,body) {\n            console.log(body);\n            lib.done();\n        });\n    });\n    \n    queue.pushAsync(function(lib) {\n        // do something else asynchronously\n        request('http://reddit.com',function(err,response,body) {\n            console.log(body);\n            lib.done();\n        });\n        lib.done();\n    });\n\nExample 2\n---------\n\n    queue.series([\n        function(lib) {\n            console.log(\"getting xkcd\");\n            request('http://xkcd.com',function(err,response,body) {\n                console.log(response.headers);\n                lib.done();\n            });\n        },\n        function(lib) {\n            console.log(\"getting nmpjs\");\n            request('http://npmjs.org',function(err,response,body) {\n                console.log(response.headers);\n                lib.done();\n            });\n        }\n    ]);\n\nTerminating a series early\n==========================\n\n\n.terminate(id)\n------------\n\nOn any series function, an id will be passed as a second parameter with which you can call .terminate(id)\n\n    queue.series([\n        function(lib) {\n            console.log(\"getting xkcd\");\n            request('http://xkcd.com',function(err,response,body) {\n                console.log(response.request.host);\n                lib.done();\n            });\n        },\n        function(lib,id) {\n            console.log(\"getting nmpjs\");\n            request('http://npmjs.org',function(err,response,body) {\n                console.log(response.request.host);\n                lib.terminate(id);\n            });\n        },\n        function(lib) {\n            console.log(\"getting perl\");\n            request('http://perl.org',function(err,response,body) {\n                console.log(response.request.host);\n                lib.done();\n            });\n        }\n    ]);\n\n    queue.pushAsync(function(lib) {\n        console.log(list);\n        // ['xkcd.com','www.nmpjs.org']\n        lib.done();\n    });\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rook2pawn/node-queuelib/issues"
  },
  "_id": "queuelib@0.3.6",
  "dist": {
    "shasum": "b31cdf6c6a5f88e624770f82535a5b532a3a5fa8"
  },
  "_from": "queuelib@",
  "_resolved": "https://registry.npmjs.org/queuelib/-/queuelib-0.3.6.tgz"
}
